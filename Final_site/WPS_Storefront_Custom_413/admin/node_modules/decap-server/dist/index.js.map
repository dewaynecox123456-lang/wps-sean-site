{"version":3,"file":"index.js","mappings":"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","sources":["webpack://decap-server/external commonjs \"morgan\"","webpack://decap-server/./src/middlewares/utils/entries.ts","webpack://decap-server/external commonjs \"winston\"","webpack://decap-server/../decap-cms-lib-util/src/APIUtils.ts","webpack://decap-server/external commonjs \"express\"","webpack://decap-server/external commonjs \"what-the-diff\"","webpack://decap-server/external commonjs \"async-mutex\"","webpack://decap-server/./src/middlewares/utils/fs.ts","webpack://decap-server/external commonjs \"cors\"","webpack://decap-server/external commonjs \"@hapi/joi\"","webpack://decap-server/./src/middlewares/joi/customValidators.ts","webpack://decap-server/./src/index.ts","webpack://decap-server/./src/middlewares/localFs/index.ts","webpack://decap-server/external commonjs \"simple-git\"","webpack://decap-server/external commonjs \"dotenv\"","webpack://decap-server/./src/middlewares/common/index.ts","webpack://decap-server/external node-commonjs \"fs\"","webpack://decap-server/external node-commonjs \"path\"","webpack://decap-server/./src/logger.ts","webpack://decap-server/./src/middlewares/joi/index.ts","webpack://decap-server/./src/middlewares/localGit/index.ts","webpack://decap-server/external node-commonjs \"crypto\"","webpack://decap-server/webpack/bootstrap","webpack://decap-server/webpack/startup"],"sourcesContent":["module.exports = require(\"morgan\");","import crypto from 'crypto';\nimport path from 'path';\nimport { promises as fs } from 'fs';\n\nfunction sha256(buffer: Buffer) {\n  return crypto.createHash('sha256').update(buffer).digest('hex');\n}\n\n// normalize windows os path format\nfunction normalizePath(path: string) {\n  return path.replace(/\\\\/g, '/');\n}\n\nexport async function entriesFromFiles(\n  repoPath: string,\n  files: { path: string; label?: string }[],\n) {\n  return Promise.all(\n    files.map(async file => {\n      try {\n        const content = await fs.readFile(path.join(repoPath, file.path));\n        return {\n          data: content.toString(),\n          file: { path: normalizePath(file.path), label: file.label, id: sha256(content) },\n        };\n      } catch (e) {\n        return {\n          data: null,\n          file: { path: normalizePath(file.path), label: file.label, id: null },\n        };\n      }\n    }),\n  );\n}\n\nexport async function readMediaFile(repoPath: string, file: string) {\n  const encoding = 'base64';\n  const buffer = await fs.readFile(path.join(repoPath, file));\n  const id = sha256(buffer);\n\n  return {\n    id,\n    content: buffer.toString(encoding),\n    encoding,\n    path: normalizePath(file),\n    name: path.basename(file),\n  };\n}\n","module.exports = require(\"winston\");","export const CMS_BRANCH_PREFIX = 'cms';\nexport const DEFAULT_PR_BODY = 'Automatically generated by Decap CMS';\nexport const MERGE_COMMIT_MESSAGE = 'Automatically generated. Merged on Decap CMS.';\n\nconst DEFAULT_DECAP_CMS_LABEL_PREFIX = 'decap-cms/';\n\nfunction getLabelPrefix(labelPrefix: string) {\n  return labelPrefix || DEFAULT_DECAP_CMS_LABEL_PREFIX;\n}\n\nexport function isCMSLabel(label: string, labelPrefix: string) {\n  return label.startsWith(getLabelPrefix(labelPrefix));\n}\n\nexport function labelToStatus(label: string, labelPrefix: string) {\n  return label.slice(getLabelPrefix(labelPrefix).length);\n}\n\nexport function statusToLabel(status: string, labelPrefix: string) {\n  return `${getLabelPrefix(labelPrefix)}${status}`;\n}\n\nexport function generateContentKey(collectionName: string, slug: string) {\n  return `${collectionName}/${slug}`;\n}\n\nexport function parseContentKey(contentKey: string) {\n  const index = contentKey.indexOf('/');\n  return { collection: contentKey.slice(0, index), slug: contentKey.slice(index + 1) };\n}\n\nexport function contentKeyFromBranch(branch: string) {\n  return branch.slice(`${CMS_BRANCH_PREFIX}/`.length);\n}\n\nexport function branchFromContentKey(contentKey: string) {\n  return `${CMS_BRANCH_PREFIX}/${contentKey}`;\n}\n","module.exports = require(\"express\");","module.exports = require(\"what-the-diff\");","module.exports = require(\"async-mutex\");","import path from 'path';\nimport { promises as fs } from 'fs';\n\nasync function listFiles(dir: string, extension: string, depth: number): Promise<string[]> {\n  if (depth <= 0) {\n    return [];\n  }\n\n  try {\n    const dirents = await fs.readdir(dir, { withFileTypes: true });\n    const files = await Promise.all(\n      dirents.map(dirent => {\n        const res = path.join(dir, dirent.name);\n        return dirent.isDirectory()\n          ? listFiles(res, extension, depth - 1)\n          : [res].filter(f => f.endsWith(extension));\n      }),\n    );\n    return ([] as string[]).concat(...files);\n  } catch (e) {\n    return [];\n  }\n}\n\nexport async function listRepoFiles(\n  repoPath: string,\n  folder: string,\n  extension: string,\n  depth: number,\n) {\n  const files = await listFiles(path.join(repoPath, folder), extension, depth);\n  return files.map(f => f.slice(repoPath.length + 1));\n}\n\nexport async function writeFile(filePath: string, content: Buffer | string) {\n  await fs.mkdir(path.dirname(filePath), { recursive: true });\n  await fs.writeFile(filePath, content);\n}\n\nexport async function deleteFile(repoPath: string, filePath: string) {\n  await fs.unlink(path.join(repoPath, filePath)).catch(() => undefined);\n}\n\nasync function moveFile(from: string, to: string) {\n  await fs.mkdir(path.dirname(to), { recursive: true });\n  await fs.rename(from, to);\n}\n\nexport async function move(from: string, to: string) {\n  // move file\n  await moveFile(from, to);\n\n  // move children\n  const sourceDir = path.dirname(from);\n  const destDir = path.dirname(to);\n  const allFiles = await listFiles(sourceDir, '', 100);\n  await Promise.all(allFiles.map(file => moveFile(file, file.replace(sourceDir, destDir))));\n}\n\nexport async function getUpdateDate(repoPath: string, filePath: string) {\n  return fs\n    .stat(path.join(repoPath, filePath))\n    .then(stat => stat.mtime)\n    .catch(() => new Date());\n}\n","module.exports = require(\"cors\");","module.exports = require(\"@hapi/joi\");","import Joi from '@hapi/joi';\nimport path from 'path';\n\nexport function pathTraversal(repoPath: string) {\n  return Joi.extend({\n    type: 'path',\n    base: Joi.string().required(),\n    messages: {\n      'path.invalid': '{{#label}} must resolve to a path under the configured repository',\n    },\n    validate(value, helpers) {\n      const resolvedPath = path.join(repoPath, value);\n      if (!resolvedPath.startsWith(repoPath)) {\n        return { value, errors: helpers.error('path.invalid') };\n      }\n    },\n  }).path();\n}\n","// eslint-disable-next-line @typescript-eslint/no-var-requires\nrequire('dotenv').config();\nimport express from 'express';\n\nimport { registerCommonMiddlewares } from './middlewares/common';\nimport { registerMiddleware as registerLocalGit } from './middlewares/localGit';\nimport { registerMiddleware as registerLocalFs } from './middlewares/localFs';\nimport { createLogger } from './logger';\n\nconst app = express();\nconst port = process.env.PORT || 8081;\nconst level = process.env.LOG_LEVEL || 'info';\n\n(async () => {\n  const logger = createLogger({ level });\n  const options = {\n    logger,\n  };\n\n  registerCommonMiddlewares(app, options);\n\n  try {\n    const mode = process.env.MODE || 'fs';\n    if (mode === 'fs') {\n      registerLocalFs(app, options);\n    } else if (mode === 'git') {\n      registerLocalGit(app, options);\n    } else {\n      throw new Error(`Unknown proxy mode '${mode}'`);\n    }\n  } catch (e) {\n    logger.error(e instanceof Error ? e.message : 'Unknown error');\n    process.exit(1);\n  }\n\n  return app.listen(port, () => {\n    logger.info(`Decap CMS Proxy Server listening on port ${port}`);\n  });\n})();\n","import path from 'path';\n\nimport { defaultSchema, joi } from '../joi';\nimport { pathTraversal } from '../joi/customValidators';\nimport { listRepoFiles, deleteFile, writeFile, move } from '../utils/fs';\nimport { entriesFromFiles, readMediaFile } from '../utils/entries';\n\nimport type {\n  EntriesByFolderParams,\n  EntriesByFilesParams,\n  GetEntryParams,\n  PersistEntryParams,\n  GetMediaParams,\n  GetMediaFileParams,\n  PersistMediaParams,\n  DeleteFileParams,\n  DeleteFilesParams,\n  DataFile,\n} from '../types';\nimport type express from 'express';\nimport type winston from 'winston';\n\ntype FsOptions = {\n  repoPath: string;\n  logger: winston.Logger;\n};\n\nexport function localFsMiddleware({ repoPath, logger }: FsOptions) {\n  return async function (req: express.Request, res: express.Response) {\n    try {\n      const { body } = req;\n\n      switch (body.action) {\n        case 'info': {\n          res.json({\n            repo: path.basename(repoPath),\n            publish_modes: ['simple'],\n            type: 'local_fs',\n          });\n          break;\n        }\n        case 'entriesByFolder': {\n          const payload = body.params as EntriesByFolderParams;\n          const { folder, extension, depth } = payload;\n          const entries = await listRepoFiles(repoPath, folder, extension, depth).then(files =>\n            entriesFromFiles(\n              repoPath,\n              files.map(file => ({ path: file })),\n            ),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'entriesByFiles': {\n          const payload = body.params as EntriesByFilesParams;\n          const entries = await entriesFromFiles(repoPath, payload.files);\n          res.json(entries);\n          break;\n        }\n        case 'getEntry': {\n          const payload = body.params as GetEntryParams;\n          const [entry] = await entriesFromFiles(repoPath, [{ path: payload.path }]);\n          res.json(entry);\n          break;\n        }\n        case 'persistEntry': {\n          const {\n            entry,\n            dataFiles = [entry as DataFile],\n            assets,\n          } = body.params as PersistEntryParams;\n          await Promise.all(\n            dataFiles.map(dataFile => writeFile(path.join(repoPath, dataFile.path), dataFile.raw)),\n          );\n          // save assets\n          await Promise.all(\n            assets.map(a =>\n              writeFile(path.join(repoPath, a.path), Buffer.from(a.content, a.encoding)),\n            ),\n          );\n          if (dataFiles.every(dataFile => dataFile.newPath)) {\n            dataFiles.forEach(async dataFile => {\n              await move(\n                path.join(repoPath, dataFile.path),\n                path.join(repoPath, dataFile.newPath!),\n              );\n            });\n          }\n          res.json({ message: 'entry persisted' });\n          break;\n        }\n        case 'getMedia': {\n          const { mediaFolder } = body.params as GetMediaParams;\n          const files = await listRepoFiles(repoPath, mediaFolder, '', 1);\n          const mediaFiles = await Promise.all(files.map(file => readMediaFile(repoPath, file)));\n          res.json(mediaFiles);\n          break;\n        }\n        case 'getMediaFile': {\n          const { path } = body.params as GetMediaFileParams;\n          const mediaFile = await readMediaFile(repoPath, path);\n          res.json(mediaFile);\n          break;\n        }\n        case 'persistMedia': {\n          const { asset } = body.params as PersistMediaParams;\n          await writeFile(\n            path.join(repoPath, asset.path),\n            Buffer.from(asset.content, asset.encoding),\n          );\n          const file = await readMediaFile(repoPath, asset.path);\n          res.json(file);\n          break;\n        }\n        case 'deleteFile': {\n          const { path: filePath } = body.params as DeleteFileParams;\n          await deleteFile(repoPath, filePath);\n          res.json({ message: `deleted file ${filePath}` });\n          break;\n        }\n        case 'deleteFiles': {\n          const { paths } = body.params as DeleteFilesParams;\n          await Promise.all(paths.map(filePath => deleteFile(repoPath, filePath)));\n          res.json({ message: `deleted files ${paths.join(', ')}` });\n          break;\n        }\n        case 'getDeployPreview': {\n          res.json(null);\n          break;\n        }\n        default: {\n          const message = `Unknown action ${body.action}`;\n          res.status(422).json({ error: message });\n          break;\n        }\n      }\n    } catch (e) {\n      logger.error(\n        `Error handling ${JSON.stringify(req.body)}: ${\n          e instanceof Error ? e.message : 'Unknown error'\n        }`,\n      );\n      res.status(500).json({ error: 'Unknown error' });\n    }\n  };\n}\n\nexport function getSchema({ repoPath }: { repoPath: string }) {\n  const schema = defaultSchema({ path: pathTraversal(repoPath) });\n  return schema;\n}\n\ntype Options = {\n  logger: winston.Logger;\n};\n\nexport async function registerMiddleware(app: express.Express, options: Options) {\n  const { logger } = options;\n  const repoPath = path.resolve(process.env.GIT_REPO_DIRECTORY || process.cwd());\n  app.post('/api/v1', joi(getSchema({ repoPath })));\n  app.post('/api/v1', localFsMiddleware({ repoPath, logger }));\n  logger.info(`Decap CMS File System Proxy Server configured with ${repoPath}`);\n}\n","module.exports = require(\"simple-git\");","module.exports = require(\"dotenv\");","import express from 'express';\nimport morgan from 'morgan';\nimport cors from 'cors';\n\nimport type winston from 'winston';\n\nexport type Options = {\n  logger: winston.Logger;\n};\n\nexport function registerCommonMiddlewares(app: express.Express, options: Options) {\n  const { logger } = options;\n  const stream = {\n    write: (message: string) => {\n      logger.debug(String(message).trim());\n    },\n  };\n  app.use(morgan('combined', { stream }));\n  app.use(cors());\n  app.use(express.json({ limit: '50mb' }));\n}\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","import winston from 'winston';\n\nconst { combine, colorize, simple } = winston.format;\n\ntype LogOptions = {\n  level: string;\n};\n\nexport function createLogger({ level }: LogOptions) {\n  return winston.createLogger({\n    level,\n    format: combine(colorize(), simple()),\n    transports: [new winston.transports.Console()],\n  });\n}\n","import Joi from '@hapi/joi';\n\nimport type express from 'express';\n\nconst allowedActions = [\n  'info',\n  'entriesByFolder',\n  'entriesByFiles',\n  'getEntry',\n  'unpublishedEntries',\n  'unpublishedEntry',\n  'unpublishedEntryDataFile',\n  'unpublishedEntryMediaFile',\n  'deleteUnpublishedEntry',\n  'persistEntry',\n  'updateUnpublishedEntryStatus',\n  'publishUnpublishedEntry',\n  'getMedia',\n  'getMediaFile',\n  'persistMedia',\n  'deleteFile',\n  'deleteFiles',\n  'getDeployPreview',\n];\n\nconst requiredString = Joi.string().required();\nconst requiredNumber = Joi.number().required();\nconst requiredBool = Joi.bool().required();\n\nconst collection = requiredString;\nconst slug = requiredString;\n\nexport function defaultSchema({ path = requiredString } = {}) {\n  const defaultParams = Joi.object({\n    branch: requiredString,\n  });\n\n  const asset = Joi.object({\n    path,\n    content: requiredString,\n    encoding: requiredString.valid('base64'),\n  });\n\n  const dataFile = Joi.object({\n    slug: requiredString,\n    path,\n    raw: requiredString,\n    newPath: path.optional(),\n  });\n\n  const params = Joi.when('action', {\n    switch: [\n      {\n        is: 'info',\n        then: Joi.allow(),\n      },\n      {\n        is: 'entriesByFolder',\n        then: defaultParams\n          .keys({\n            folder: path,\n            extension: requiredString,\n            depth: requiredNumber,\n          })\n          .required(),\n      },\n      {\n        is: 'entriesByFiles',\n        then: defaultParams.keys({\n          files: Joi.array()\n            .items(Joi.object({ path, label: Joi.string() }))\n            .required(),\n        }),\n      },\n      {\n        is: 'getEntry',\n        then: defaultParams\n          .keys({\n            path,\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntries',\n        then: defaultParams.keys({ branch: requiredString }).required(),\n      },\n      {\n        is: 'unpublishedEntry',\n        then: defaultParams\n          .keys({\n            id: Joi.string().optional(),\n            collection: Joi.string().optional(),\n            slug: Joi.string().optional(),\n            cmsLabelPrefix: Joi.string().optional(),\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntryDataFile',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            id: requiredString,\n            path: requiredString,\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntryMediaFile',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            id: requiredString,\n            path: requiredString,\n          })\n          .required(),\n      },\n      {\n        is: 'deleteUnpublishedEntry',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n      {\n        is: 'persistEntry',\n        then: defaultParams\n          .keys({\n            cmsLabelPrefix: Joi.string().optional(),\n            entry: dataFile, // entry is kept for backwards compatibility\n            dataFiles: Joi.array().items(dataFile),\n            assets: Joi.array().items(asset).required(),\n            options: Joi.object({\n              collectionName: Joi.string(),\n              commitMessage: requiredString,\n              useWorkflow: requiredBool,\n              status: requiredString,\n            }).required(),\n          })\n          .xor('entry', 'dataFiles')\n          .required(),\n      },\n      {\n        is: 'updateUnpublishedEntryStatus',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            newStatus: requiredString,\n            cmsLabelPrefix: Joi.string().optional(),\n          })\n          .required(),\n      },\n      {\n        is: 'publishUnpublishedEntry',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n      {\n        is: 'getMedia',\n        then: defaultParams\n          .keys({\n            mediaFolder: path,\n          })\n          .required(),\n      },\n      {\n        is: 'getMediaFile',\n        then: defaultParams\n          .keys({\n            path,\n          })\n          .required(),\n      },\n      {\n        is: 'persistMedia',\n        then: defaultParams\n          .keys({\n            asset: asset.required(),\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'deleteFile',\n        then: defaultParams\n          .keys({\n            path,\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'deleteFiles',\n        then: defaultParams\n          .keys({\n            paths: Joi.array().items(path).min(1).required(),\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'getDeployPreview',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n    ],\n    otherwise: Joi.forbidden(),\n  });\n\n  return Joi.object({\n    action: Joi.valid(...allowedActions).required(),\n    params,\n  });\n}\n\nexport function joi(schema: Joi.Schema) {\n  return (req: express.Request, res: express.Response, next: express.NextFunction) => {\n    const { error } = schema.validate(req.body, { allowUnknown: true });\n    if (error) {\n      const { details } = error;\n      const message = details.map(i => i.message).join(',');\n      res.status(422).json({ error: message });\n    } else {\n      next();\n    }\n  };\n}\n","import path from 'path';\nimport { promises as fs } from 'fs';\nimport {\n  branchFromContentKey,\n  generateContentKey,\n  contentKeyFromBranch,\n  CMS_BRANCH_PREFIX,\n  statusToLabel,\n  labelToStatus,\n  parseContentKey,\n} from 'decap-cms-lib-util/src/APIUtils';\nimport { parse } from 'what-the-diff';\n// eslint-disable-next-line import/no-named-as-default\nimport simpleGit from 'simple-git';\nimport { Mutex, withTimeout } from 'async-mutex';\n\nimport { defaultSchema, joi } from '../joi';\nimport { pathTraversal } from '../joi/customValidators';\nimport { listRepoFiles, writeFile, move, deleteFile, getUpdateDate } from '../utils/fs';\nimport { entriesFromFiles, readMediaFile } from '../utils/entries';\n\nimport type {\n  EntriesByFolderParams,\n  EntriesByFilesParams,\n  GetEntryParams,\n  DefaultParams,\n  UnpublishedEntryParams,\n  PersistEntryParams,\n  GetMediaParams,\n  Asset,\n  PublishUnpublishedEntryParams,\n  PersistMediaParams,\n  DeleteFileParams,\n  UpdateUnpublishedEntryStatusParams,\n  DataFile,\n  GetMediaFileParams,\n  DeleteEntryParams,\n  DeleteFilesParams,\n  UnpublishedEntryDataFileParams,\n  UnpublishedEntryMediaFileParams,\n} from '../types';\nimport type express from 'express';\nimport type winston from 'winston';\nimport type { SimpleGit } from 'simple-git';\n\nasync function commit(git: SimpleGit, commitMessage: string) {\n  await git.add('.');\n  await git.commit(commitMessage, undefined, {\n    // setting the value to a string passes name=value\n    // any other value passes just the key\n    '--no-verify': null,\n    '--no-gpg-sign': null,\n  });\n}\n\nasync function getCurrentBranch(git: SimpleGit) {\n  const currentBranch = await git.branchLocal().then(summary => summary.current);\n  return currentBranch;\n}\n\nasync function runOnBranch<T>(git: SimpleGit, branch: string, func: () => Promise<T>) {\n  const currentBranch = await getCurrentBranch(git);\n  try {\n    if (currentBranch !== branch) {\n      await git.checkout(branch);\n    }\n    const result = await func();\n    return result;\n  } finally {\n    await git.checkout(currentBranch);\n  }\n}\n\nfunction branchDescription(branch: string) {\n  return `branch.${branch}.description`;\n}\n\ntype GitOptions = {\n  repoPath: string;\n  logger: winston.Logger;\n};\n\nasync function commitEntry(\n  git: SimpleGit,\n  repoPath: string,\n  dataFiles: DataFile[],\n  assets: Asset[],\n  commitMessage: string,\n) {\n  // save entry content\n  await Promise.all(\n    dataFiles.map(dataFile => writeFile(path.join(repoPath, dataFile.path), dataFile.raw)),\n  );\n  // save assets\n  await Promise.all(\n    assets.map(a => writeFile(path.join(repoPath, a.path), Buffer.from(a.content, a.encoding))),\n  );\n  if (dataFiles.every(dataFile => dataFile.newPath)) {\n    dataFiles.forEach(async dataFile => {\n      await move(path.join(repoPath, dataFile.path), path.join(repoPath, dataFile.newPath!));\n    });\n  }\n\n  // commits files\n  await commit(git, commitMessage);\n}\n\nasync function rebase(git: SimpleGit, branch: string) {\n  const gpgSign = await git.raw(['config', 'commit.gpgsign']);\n  try {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', 'false');\n    }\n    await git.rebase([branch, '--no-verify']);\n  } finally {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', gpgSign);\n    }\n  }\n}\n\nasync function merge(git: SimpleGit, from: string, to: string) {\n  const gpgSign = await git.raw(['config', 'commit.gpgsign']);\n  try {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', 'false');\n    }\n    await git.mergeFromTo(from, to);\n  } finally {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', gpgSign);\n    }\n  }\n}\n\nasync function isBranchExists(git: SimpleGit, branch: string) {\n  const branchExists = await git.branchLocal().then(({ all }) => all.includes(branch));\n  return branchExists;\n}\n\nasync function getDiffs(git: SimpleGit, source: string, dest: string) {\n  const rawDiff = await git.diff([source, dest]);\n  const diffs = parse(rawDiff).map(d => {\n    const oldPath = d.oldPath?.replace(/b\\//, '') || '';\n    const newPath = d.newPath?.replace(/b\\//, '') || '';\n    const path = newPath || (oldPath as string);\n    return {\n      oldPath,\n      newPath,\n      status: d.status,\n      newFile: d.status === 'added',\n      path,\n      id: path,\n      binary: d.binary || /.svg$/.test(path),\n    };\n  });\n  return diffs;\n}\n\nexport async function validateRepo({ repoPath }: { repoPath: string }) {\n  const git = simpleGit(repoPath);\n  const isRepo = await git.checkIsRepo();\n  if (!isRepo) {\n    throw Error(`${repoPath} is not a valid git repository`);\n  }\n}\n\nexport function getSchema({ repoPath }: { repoPath: string }) {\n  const schema = defaultSchema({ path: pathTraversal(repoPath) });\n  return schema;\n}\n\nexport function localGitMiddleware({ repoPath, logger }: GitOptions) {\n  const git = simpleGit(repoPath);\n\n  // we can only perform a single git operation at any given time\n  const mutex = withTimeout(new Mutex(), 3000, new Error('Request timed out'));\n\n  return async function (req: express.Request, res: express.Response) {\n    let release;\n    try {\n      release = await mutex.acquire();\n      const { body } = req;\n      if (body.action === 'info') {\n        res.json({\n          repo: path.basename(repoPath),\n          publish_modes: ['simple', 'editorial_workflow'],\n          type: 'local_git',\n        });\n        return;\n      }\n      const { branch } = body.params as DefaultParams;\n\n      const branchExists = await isBranchExists(git, branch);\n      if (!branchExists) {\n        const message = `Default branch '${branch}' doesn't exist`;\n        res.status(422).json({ error: message });\n        return;\n      }\n\n      switch (body.action) {\n        case 'entriesByFolder': {\n          const payload = body.params as EntriesByFolderParams;\n          const { folder, extension, depth } = payload;\n          const entries = await runOnBranch(git, branch, () =>\n            listRepoFiles(repoPath, folder, extension, depth).then(files =>\n              entriesFromFiles(\n                repoPath,\n                files.map(file => ({ path: file })),\n              ),\n            ),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'entriesByFiles': {\n          const payload = body.params as EntriesByFilesParams;\n          const entries = await runOnBranch(git, branch, () =>\n            entriesFromFiles(repoPath, payload.files),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'getEntry': {\n          const payload = body.params as GetEntryParams;\n          const [entry] = await runOnBranch(git, branch, () =>\n            entriesFromFiles(repoPath, [{ path: payload.path }]),\n          );\n          res.json(entry);\n          break;\n        }\n        case 'unpublishedEntries': {\n          const cmsBranches = await git\n            .branchLocal()\n            .then(result => result.all.filter(b => b.startsWith(`${CMS_BRANCH_PREFIX}/`)));\n          res.json(cmsBranches.map(contentKeyFromBranch));\n          break;\n        }\n        case 'unpublishedEntry': {\n          let { id, collection, slug, cmsLabelPrefix } = body.params as UnpublishedEntryParams;\n          if (id) {\n            ({ collection, slug } = parseContentKey(id));\n          }\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const branchExists = await isBranchExists(git, cmsBranch);\n          if (branchExists) {\n            const diffs = await getDiffs(git, branch, cmsBranch);\n            const label = await git.raw(['config', branchDescription(cmsBranch)]);\n            const status = label && labelToStatus(label.trim(), cmsLabelPrefix || '');\n            const updatedAt =\n              diffs.length >= 0\n                ? await runOnBranch(git, cmsBranch, async () => {\n                    const dates = await Promise.all(\n                      diffs.map(({ newPath }) => getUpdateDate(repoPath, newPath)),\n                    );\n                    return dates.reduce((a, b) => {\n                      return a > b ? a : b;\n                    });\n                  })\n                : new Date();\n            const unpublishedEntry = {\n              collection,\n              slug,\n              status,\n              diffs,\n              updatedAt,\n            };\n            res.json(unpublishedEntry);\n          } else {\n            return res.status(404).json({ message: 'Not Found' });\n          }\n          break;\n        }\n        case 'unpublishedEntryDataFile': {\n          const { path, collection, slug } = body.params as UnpublishedEntryDataFileParams;\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const [entry] = await runOnBranch(git, cmsBranch, () =>\n            entriesFromFiles(repoPath, [{ path }]),\n          );\n          res.json({ data: entry.data });\n          break;\n        }\n        case 'unpublishedEntryMediaFile': {\n          const { path, collection, slug } = body.params as UnpublishedEntryMediaFileParams;\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const file = await runOnBranch(git, cmsBranch, () => readMediaFile(repoPath, path));\n          res.json(file);\n          break;\n        }\n        case 'deleteUnpublishedEntry': {\n          const { collection, slug } = body.params as DeleteEntryParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const currentBranch = await getCurrentBranch(git);\n          if (currentBranch === cmsBranch) {\n            await git.checkoutLocalBranch(branch);\n          }\n          await git.branch(['-D', cmsBranch]);\n          res.json({ message: `deleted branch: ${cmsBranch}` });\n          break;\n        }\n        case 'persistEntry': {\n          const {\n            cmsLabelPrefix,\n            entry,\n            dataFiles = [entry as DataFile],\n            assets,\n            options,\n          } = body.params as PersistEntryParams;\n\n          if (!options.useWorkflow) {\n            await runOnBranch(git, branch, async () => {\n              await commitEntry(git, repoPath, dataFiles, assets, options.commitMessage);\n            });\n          } else {\n            const slug = dataFiles[0].slug;\n            const collection = options.collectionName as string;\n            const contentKey = generateContentKey(collection, slug);\n            const cmsBranch = branchFromContentKey(contentKey);\n            await runOnBranch(git, branch, async () => {\n              const branchExists = await isBranchExists(git, cmsBranch);\n              if (branchExists) {\n                await git.checkout(cmsBranch);\n              } else {\n                await git.checkoutLocalBranch(cmsBranch);\n              }\n              await rebase(git, branch);\n              const diffs = await getDiffs(git, branch, cmsBranch);\n              // delete media files that have been removed from the entry\n              const toDelete = diffs.filter(\n                d => d.binary && !assets.map(a => a.path).includes(d.path),\n              );\n              await Promise.all(toDelete.map(f => fs.unlink(path.join(repoPath, f.path))));\n              await commitEntry(git, repoPath, dataFiles, assets, options.commitMessage);\n\n              // add status for new entries\n              if (!branchExists) {\n                const description = statusToLabel(options.status, cmsLabelPrefix || '');\n                await git.addConfig(branchDescription(cmsBranch), description);\n              }\n            });\n          }\n          res.json({ message: 'entry persisted' });\n          break;\n        }\n        case 'updateUnpublishedEntryStatus': {\n          const { collection, slug, newStatus, cmsLabelPrefix } =\n            body.params as UpdateUnpublishedEntryStatusParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const description = statusToLabel(newStatus, cmsLabelPrefix || '');\n          await git.addConfig(branchDescription(cmsBranch), description);\n          res.json({ message: `${branch} description was updated to ${description}` });\n          break;\n        }\n        case 'publishUnpublishedEntry': {\n          const { collection, slug } = body.params as PublishUnpublishedEntryParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          await merge(git, cmsBranch, branch);\n          await git.deleteLocalBranch(cmsBranch);\n          res.json({ message: `branch ${cmsBranch} merged to ${branch}` });\n          break;\n        }\n        case 'getMedia': {\n          const { mediaFolder } = body.params as GetMediaParams;\n          const mediaFiles = await runOnBranch(git, branch, async () => {\n            const files = await listRepoFiles(repoPath, mediaFolder, '', 1);\n            const serializedFiles = await Promise.all(\n              files.map(file => readMediaFile(repoPath, file)),\n            );\n            return serializedFiles;\n          });\n          res.json(mediaFiles);\n          break;\n        }\n        case 'getMediaFile': {\n          const { path } = body.params as GetMediaFileParams;\n          const mediaFile = await runOnBranch(git, branch, () => {\n            return readMediaFile(repoPath, path);\n          });\n          res.json(mediaFile);\n          break;\n        }\n        case 'persistMedia': {\n          const {\n            asset,\n            options: { commitMessage },\n          } = body.params as PersistMediaParams;\n\n          const file = await runOnBranch(git, branch, async () => {\n            await writeFile(\n              path.join(repoPath, asset.path),\n              Buffer.from(asset.content, asset.encoding),\n            );\n            await commit(git, commitMessage);\n            return readMediaFile(repoPath, asset.path);\n          });\n          res.json(file);\n          break;\n        }\n        case 'deleteFile': {\n          const {\n            path: filePath,\n            options: { commitMessage },\n          } = body.params as DeleteFileParams;\n          await runOnBranch(git, branch, async () => {\n            await deleteFile(repoPath, filePath);\n            await commit(git, commitMessage);\n          });\n          res.json({ message: `deleted file ${filePath}` });\n          break;\n        }\n        case 'deleteFiles': {\n          const {\n            paths,\n            options: { commitMessage },\n          } = body.params as DeleteFilesParams;\n          await runOnBranch(git, branch, async () => {\n            await Promise.all(paths.map(filePath => deleteFile(repoPath, filePath)));\n            await commit(git, commitMessage);\n          });\n          res.json({ message: `deleted files ${paths.join(', ')}` });\n          break;\n        }\n        case 'getDeployPreview': {\n          res.json(null);\n          break;\n        }\n        default: {\n          const message = `Unknown action ${body.action}`;\n          res.status(422).json({ error: message });\n          break;\n        }\n      }\n    } catch (e) {\n      logger.error(\n        `Error handling ${JSON.stringify(req.body)}: ${\n          e instanceof Error ? e.message : 'Unknown error'\n        }`,\n      );\n      res.status(500).json({ error: 'Unknown error' });\n    } finally {\n      release && release();\n    }\n  };\n}\n\ntype Options = {\n  logger: winston.Logger;\n};\n\nexport async function registerMiddleware(app: express.Express, options: Options) {\n  const { logger } = options;\n  const repoPath = path.resolve(process.env.GIT_REPO_DIRECTORY || process.cwd());\n  await validateRepo({ repoPath });\n  app.post('/api/v1', joi(getSchema({ repoPath })));\n  app.post('/api/v1', localGitMiddleware({ repoPath, logger }));\n  logger.info(`Decap CMS Git Proxy Server configured with ${repoPath}`);\n}\n","module.exports = require(\"crypto\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(783);\n"],"names":["module","exports","require","sha256","buffer","createHash","update","digest","normalizePath","path","replace","async","repoPath","files","Promise","all","map","file","content","readFile","join","data","toString","label","id","e","encoding","name","basename","getLabelPrefix","labelPrefix","CMS_BRANCH_PREFIX","DEFAULT_PR_BODY","MERGE_COMMIT_MESSAGE","startsWith","slice","length","status","collectionName","slug","contentKey","index","indexOf","collection","branch","listFiles","dir","extension","depth","dirents","readdir","withFileTypes","dirent","res","isDirectory","filter","f","endsWith","concat","moveFile","from","to","mkdir","dirname","recursive","rename","folder","filePath","writeFile","unlink","catch","sourceDir","destDir","allFiles","stat","then","mtime","Date","extend","type","base","string","required","messages","validate","value","helpers","errors","error","app","port","process","env","PORT","level","LOG_LEVEL","logger","createLogger","options","registerCommonMiddlewares","mode","MODE","Error","message","exit","listen","info","localFsMiddleware","req","body","action","json","repo","publish_modes","payload","params","entries","listRepoFiles","entriesFromFiles","entry","dataFiles","assets","dataFile","raw","a","Buffer","every","newPath","forEach","move","mediaFolder","mediaFiles","readMediaFile","mediaFile","asset","deleteFile","paths","JSON","stringify","getSchema","defaultSchema","pathTraversal","resolve","GIT_REPO_DIRECTORY","cwd","post","joi","stream","write","debug","String","trim","use","limit","combine","colorize","simple","format","transports","Console","allowedActions","requiredString","requiredNumber","number","requiredBool","bool","defaultParams","object","valid","optional","when","switch","is","allow","keys","array","items","cmsLabelPrefix","commitMessage","useWorkflow","xor","newStatus","min","otherwise","forbidden","schema","next","allowUnknown","details","i","commit","git","add","undefined","getCurrentBranch","branchLocal","summary","current","runOnBranch","func","currentBranch","checkout","branchDescription","commitEntry","isBranchExists","includes","getDiffs","source","dest","rawDiff","diff","parse","d","oldPath","newFile","binary","test","validateRepo","checkIsRepo","localGitMiddleware","mutex","withTimeout","Mutex","release","acquire","cmsBranches","result","b","contentKeyFromBranch","parseContentKey","generateContentKey","cmsBranch","branchFromContentKey","diffs","labelToStatus","updatedAt","getUpdateDate","reduce","unpublishedEntry","checkoutLocalBranch","branchExists","gpgSign","addConfig","rebase","toDelete","description","statusToLabel","mergeFromTo","merge","deleteLocalBranch","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}